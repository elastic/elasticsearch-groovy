/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

///////////////////////////////////////////////////
//                                               //
//                Gradle Plugins                 //
//                                               //
///////////////////////////////////////////////////

apply plugin: 'groovy'
apply plugin: 'java-library-distribution'
apply plugin: 'elasticsearch.build'
apply plugin: 'nebula.optional-base'
apply plugin: 'nebula.maven-base-publish'
apply plugin: 'nebula.maven-scm'

///////////////////////////////////////////////////
//                                               //
//             Dependency Details                //
//                                               //
///////////////////////////////////////////////////

/**
 * Associate external dependencies with this project. Gradle only requires this step, and it does not require the
 * {@code versions} and {@code externalDeps} {@code Map}s. I find that they make it much easier to eyeball what is
 * happening as well as to find mistakes.
 * <p>
 * Where order does <em>not</em> matter for the dependencies, then they are sorted alphabetically.
 */
dependencies {
  testCompile("org.elasticsearch.test:framework:${version}") {
    // tests use the locally compiled version of core; don't try to reach out to Maven to find it
    exclude group: 'org.elasticsearch', module: 'elasticsearch'
  }

  compile "org.elasticsearch:elasticsearch:${version}",
          "org.codehaus.groovy:groovy-all:2.4.5:indy"
}

///////////////////////////////////////////////////
//                                               //
//               Project Details                 //
//                                               //
///////////////////////////////////////////////////

// The minimum required Java version (this matches the Elasticsearch minimum Java version)
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Project details
description = 'Official Groovy client for Elasticsearch'

///////////////////////////////////////////////////
//                                               //
//             Build Customization               //
//                                               //
///////////////////////////////////////////////////

/**
 * Configure Groovy compilation.
 */
tasks.withType(GroovyCompile) {
  // Enable the usage of invokedynamic instructions in compiled Groovy code
  // NOTE: This requires the "indy" version of the Groovy jar to take effect
  groovyOptions.optimizationOptions.indy = true
}

///////////////////////////////////////////////////
//                                               //
//             Artifact Publishing               //
//                                               //
///////////////////////////////////////////////////

File secretsConfiguration = file('secrets.gradle')

// If there is a secrets configuration file, then use it to overwrite properties
if (secretsConfiguration.exists()) {
  // Meant to overwrite usernames/passwords and signing values
  apply from: secretsConfiguration
}

/**
 * Generate the Groovydoc jar on demand.
 */
task groovydocJar(type: Jar, dependsOn: groovydoc) {
  classifier = 'groovydoc'

  from groovydoc.destinationDir
}

/**
 * Generate the test jar on demand.
 * <p>
 * The test jar is useful for creating integration tests written in Groovy. It will
 * appropriately ignore Groovy-created memory. All tests must extend either
 * {@code AbstractElasticsearchIntegrationTest} or {@code AbstractElasticsearchTestCase}.
 */
task testJar(type: Jar) {
  classifier = 'tests'

  from sourceSets.test.output

  // Any abstract tests are used as the basis to build from
  include '**/Abstract*'
  // The Abstract tests need the GroovyTestSanitizer in order to avoid failing due to
  //  Groovy-created static memory
  include '**/GroovyTestSanitizer*'

  // Once it does the include, it leaves the empty directories, which are unwanted
  includeEmptyDirs = false
}

/**
 * Extra artifacts to publish along side the client jar.
 */
artifacts {
  archives groovydocJar
  archives sourcesJar
  archives testJar
}

publishing {
  publications {
    nebula {
      artifactId 'elasticsearch-groovy'
    }
  }
}

archivesBaseName = 'elasticsearch-groovy'

/**
 * Sets up the publishing of the jars to a Maven repository.
 * <p>
 * Archives and the POM file must be signed for full releases. They are less strict with snapshot releases, but they
 * should also be signed.
 */
 
 /*
uploadArchives {
  repositories {
    mavenDeployer {
      // sign the pom file
      beforeDeployment {
        signing.signPom(it)
      }

      // used to publish full releases
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: project.property('sonatypeUsername'), password: project.property('sonatypePassword'))
      }

      // used to publish snapshot dependencies
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: project.property('sonatypeUsername'), password: project.property('sonatypePassword'))
      }

      // property names containing a period (easily searchable within the POM via publishing scripts)
      def pomProperties =
        [ 'elasticsearch.version' : versions.elasticsearch,
          'groovy.version'        : versions.groovy,
          'java.version.min'      : versions.java,
          'lucene.version'        : versions.lucene ]

      // Add other fields and values to the POM file
      pom.project {
        // root-level project details
        name 'Elasticsearch Groovy Client'
        packaging 'jar'
        description project.description
        url 'https://github.com/elastic/elasticsearch-groovy'
        inceptionYear '2014'

        // Source Control details (GitHub)
        scm {
          connection 'scm:git:git@github.com:elastic/elasticsearch-groovy.git'
          developerConnection 'scm:git:git@github.com:elastic/elasticsearch-groovy.git'
          url 'https://github.com/elastic/elasticsearch-groovy'
        }

        // Using Apache 2
        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }

        // Arbitrary key/values
        properties pomProperties
      }
    }
  }
}
*/
